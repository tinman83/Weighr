// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WeighrDAL;

namespace WeighrDAL.Migrations
{
    [DbContext(typeof(WeighrContext))]
    partial class WeighrContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("WeighrDAL.Models.AccumulatedWeight", b =>
                {
                    b.Property<int>("AccumulatedWeightId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CurrentDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Weight");

                    b.HasKey("AccumulatedWeightId");

                    b.ToTable("AccumulatedWeights");
                });

            modelBuilder.Entity("WeighrDAL.Models.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchCode");

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.Property<bool>("isCurrent");

                    b.HasKey("BatchId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("WeighrDAL.Models.DeviceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("MachineName");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Model");

                    b.Property<string>("Name");

                    b.Property<string>("OSName");

                    b.Property<string>("PlantId");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("ServerUrl");

                    b.Property<string>("iotHubDeviceKey");

                    b.Property<string>("iotHubUri");

                    b.Property<bool>("pushToCloud");

                    b.Property<bool>("pushToWebApi");

                    b.HasKey("Id");

                    b.ToTable("DeviceInfos");
                });

            modelBuilder.Entity("WeighrDAL.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber");

                    b.Property<int>("Status");

                    b.Property<Guid>("rowguid");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WeighrDAL.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Units");

                    b.HasKey("OrderDetailId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("WeighrDAL.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Density");

                    b.Property<decimal>("DribblePoint");

                    b.Property<decimal>("ExpectedFillTime");

                    b.Property<decimal>("Inflight");

                    b.Property<decimal>("LowerLimit");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("ProductCode");

                    b.Property<decimal>("TargetWeight");

                    b.Property<decimal>("UpperLimit");

                    b.Property<bool>("isCurrent");

                    b.Property<Guid>("rowguid");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WeighrDAL.Models.ScaleConfig", b =>
                {
                    b.Property<int>("ScaleConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Gradient");

                    b.Property<decimal>("Resolution");

                    b.Property<decimal>("YIntercept");

                    b.Property<decimal>("offset");

                    b.HasKey("ScaleConfigId");

                    b.ToTable("ScaleConfigs");
                });

            modelBuilder.Entity("WeighrDAL.Models.ScaleSetting", b =>
                {
                    b.Property<int>("ScaleSettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DecimalPointPositionName");

                    b.Property<int>("DecimalPointPrecision");

                    b.Property<decimal>("Density");

                    b.Property<string>("DisplayUnits");

                    b.Property<decimal>("DisplayUnitsWeight");

                    b.Property<decimal>("Inflight");

                    b.Property<int>("InflightTiming");

                    b.Property<decimal>("LowerLimit");

                    b.Property<decimal>("MaximumCapacity");

                    b.Property<decimal>("MinimumDivision");

                    b.Property<bool>("PrintMode");

                    b.Property<decimal>("UpperLimit");

                    b.Property<decimal>("ZeroRange");

                    b.HasKey("ScaleSettingId");

                    b.ToTable("ScaleSettings");
                });

            modelBuilder.Entity("WeighrDAL.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("ShiftId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("WeighrDAL.Models.ShiftTarget", b =>
                {
                    b.Property<int>("ShiftTargetId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<string>("OrderNumber");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("ShiftDate");

                    b.Property<int>("ShiftId");

                    b.Property<int>("TargetUnits");

                    b.Property<int>("UnitsDone");

                    b.HasKey("ShiftTargetId");

                    b.ToTable("ShiftTargets");
                });

            modelBuilder.Entity("WeighrDAL.Models.TransactionLog", b =>
                {
                    b.Property<long>("TransactionLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualFillTime");

                    b.Property<decimal>("ActualWeight");

                    b.Property<string>("BaseUnitOfMeasure");

                    b.Property<string>("BatchCode");

                    b.Property<string>("ClientId");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("DeviceId");

                    b.Property<decimal>("ExpectedFillTime");

                    b.Property<decimal>("LowerLimit");

                    b.Property<string>("MachineName");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OrderNumber");

                    b.Property<decimal>("PercDiffFillTime");

                    b.Property<string>("PlantId");

                    b.Property<string>("ProductCode");

                    b.Property<decimal>("ProductDensity");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<string>("SerialNumber");

                    b.Property<int>("ShiftId");

                    b.Property<decimal>("TargetWeight");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<string>("Units");

                    b.Property<bool>("Uploaded");

                    b.Property<decimal>("UpperLimit");

                    b.Property<decimal>("WeightDifference");

                    b.Property<int>("WeightStatus");

                    b.Property<string>("WeightType");

                    b.Property<bool>("persistedServer");

                    b.Property<Guid>("rowguid");

                    b.HasKey("TransactionLogId");

                    b.ToTable("TransactionLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
